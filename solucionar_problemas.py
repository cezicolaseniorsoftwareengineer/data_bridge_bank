"""
Script de reparo e inicializa√ß√£o para o DataBridge
Resolve problemas de PostgreSQL e incompatibilidade da API com Python 3.13
"""
import os
import sys
import subprocess
import time
import socket
import importlib
import shutil
from pathlib import Path
import platform
import ctypes

# Constantes e caminhos
WORKSPACE_DIR = Path(__file__).parent
DATABRIDGE_DIR = WORKSPACE_DIR / "databridge"
POSTGRESQL_SERVICE_NAME = "postgresql-x64-17"

def is_admin():
    """Verifica se o script est√° sendo executado como administrador"""
    try:
        if platform.system() == 'Windows':
            return ctypes.windll.shell32.IsUserAnAdmin() != 0
        else:
            # No Unix/Linux, verifica se √© root (uid 0)
            return os.geteuid() == 0
    except:
        return False

def run_command(cmd, shell=True, timeout=None):
    """Executa um comando e retorna a sa√≠da"""
    try:
        result = subprocess.run(cmd, shell=shell, text=True, capture_output=True, timeout=timeout)
        return result.stdout, result.stderr, result.returncode
    except subprocess.TimeoutExpired:
        return "", "Timeout ao executar o comando", -1
    except Exception as e:
        return "", str(e), -1

def verificar_postgresql():
    """Verifica o PostgreSQL e tenta corrigir problemas de inicializa√ß√£o"""
    print("\nüîç Diagnosticando problemas com o PostgreSQL...")
    
    # Verificar status do servi√ßo
    stdout, stderr, code = run_command(f"sc query {POSTGRESQL_SERVICE_NAME}")
    if "RUNNING" in stdout:
        print(f"‚úÖ Servi√ßo PostgreSQL est√° rodando!")
        return True
    
    # Verificar pasta de instala√ß√£o do PostgreSQL
    print("‚û§ Procurando instala√ß√£o do PostgreSQL...")
    pg_dirs = []
    
    # Procurar em locais comuns
    for drive in ['C:', 'D:']:
        paths = [
            f"{drive}\\Program Files\\PostgreSQL",
            f"{drive}\\PostgreSQL",
            f"{drive}\\Program Files (x86)\\PostgreSQL"
        ]
        for path in paths:
            if os.path.exists(path):
                for item in os.listdir(path):
                    if os.path.isdir(os.path.join(path, item)) and item.replace('.', '').isdigit():
                        pg_dirs.append(os.path.join(path, item))
    
    if not pg_dirs:
        print("‚ùå N√£o foi poss√≠vel encontrar a instala√ß√£o do PostgreSQL")
        print("‚û§ Configurando a API para funcionar sem PostgreSQL...")
        return False
    
    pg_dir = pg_dirs[0]  # Usar a primeira instala√ß√£o encontrada
    print(f"‚úÖ Instala√ß√£o do PostgreSQL encontrada em: {pg_dir}")
    
    # Verificar logs do PostgreSQL para entender o problema
    print("\n‚û§ Verificando logs do PostgreSQL...")
    data_dir = os.path.join(pg_dir, "data")
    log_dir = os.path.join(data_dir, "log")
    
    if os.path.exists(log_dir):
        log_files = [f for f in os.listdir(log_dir) if f.endswith('.log')]
        if log_files:
            # Pegar o log mais recente
            latest_log = max(log_files, key=lambda x: os.path.getmtime(os.path.join(log_dir, x)))
            log_path = os.path.join(log_dir, latest_log)
            
            try:
                with open(log_path, 'r', errors='ignore') as f:
                    last_lines = f.readlines()[-20:]  # √öltimas 20 linhas
                    print(f"üìÉ √öltimas linhas do log ({latest_log}):")
                    for line in last_lines:
                        if "FATAL" in line or "ERROR" in line:
                            print(f"‚ùó {line.strip()}")
                        else:
                            print(f"   {line.strip()}")
            except Exception as e:
                print(f"‚ùå Erro ao ler log: {e}")
    
    # Tentar corrigir problemas comuns do PostgreSQL
    print("\n‚û§ Tentando corrigir problemas comuns do PostgreSQL...")
    
    # 1. Verificar se diret√≥rio de dados existe e tem permiss√µes
    if os.path.exists(data_dir):
        print(f"‚úì Diret√≥rio de dados encontrado: {data_dir}")
        
        # Verificar permiss√µes (apenas se for admin)
        if is_admin():
            print("‚úì Executando como administrador, ajustando permiss√µes...")
            try:
                # No Windows, ajustar permiss√µes usando icacls
                stdout, stderr, code = run_command(f'icacls "{data_dir}" /grant:r "NT AUTHORITY\\NetworkService":(OI)(CI)F')
                if code == 0:
                    print("‚úì Permiss√µes ajustadas com sucesso")
                else:
                    print(f"‚ö†Ô∏è N√£o foi poss√≠vel ajustar permiss√µes: {stderr}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao ajustar permiss√µes: {e}")
        else:
            print("‚ö†Ô∏è Execute este script como administrador para corrigir permiss√µes")
    else:
        print(f"‚ùå Diret√≥rio de dados n√£o encontrado em: {data_dir}")
        return False
    
    # 2. Verificar arquivos de lock
    print("\n‚û§ Verificando arquivos de lock...")
    lock_files = [
        os.path.join(data_dir, "postmaster.pid"),
        os.path.join(data_dir, ".s.PGSQL.5432.lock")
    ]
    
    for lock_file in lock_files:
        if os.path.exists(lock_file):
            print(f"‚ö†Ô∏è Encontrado arquivo de lock: {lock_file}")
            try:
                if is_admin():
                    os.remove(lock_file)
                    print(f"‚úì Arquivo de lock removido: {lock_file}")
                else:
                    print("‚ö†Ô∏è Execute como administrador para remover arquivos de lock")
            except Exception as e:
                print(f"‚ùå Erro ao remover arquivo de lock: {e}")
    
    # 3. Iniciar o servi√ßo novamente
    print("\n‚û§ Tentando iniciar o servi√ßo PostgreSQL...")
    if is_admin():
        stdout, stderr, code = run_command(f"sc start {POSTGRESQL_SERVICE_NAME}")
        
        # Aguardar para ver se o servi√ßo inicia
        time.sleep(5)
        
        stdout, stderr, code = run_command(f"sc query {POSTGRESQL_SERVICE_NAME}")
        if "RUNNING" in stdout:
            print("‚úÖ Servi√ßo PostgreSQL iniciado com sucesso!")
            return True
        else:
            print("‚ùå N√£o foi poss√≠vel iniciar o servi√ßo PostgreSQL")
            print(f"   Detalhes: {stdout}")
            
            # Se tudo falhar, configuramos para usar mem√≥ria
            print("‚û§ Configurando a API para funcionar sem PostgreSQL...")
            return False
    else:
        print("‚ö†Ô∏è Execute este script como administrador para iniciar o servi√ßo")
        return False

def corrigir_problema_strawberry():
    """Corrige a incompatibilidade entre Python 3.13 e Strawberry GraphQL"""
    print("\nüîß Corrigindo problema de compatibilidade com Python 3.13...")
    
    # Verificar vers√£o do Python
    python_version = platform.python_version()
    print(f"‚û§ Vers√£o do Python: {python_version}")
    
    if python_version.startswith("3.13"):
        print("‚û§ Detectada vers√£o Python 3.13, incompat√≠vel com Strawberry GraphQL 0.205.0")
        
        # Modificar o arquivo app/main.py para desativar GraphQL
        main_py = DATABRIDGE_DIR / "app" / "main.py"
        
        if main_py.exists():
            # Fazer backup do arquivo original
            backup_file = DATABRIDGE_DIR / "app" / "main.py.bak"
            if not backup_file.exists():
                shutil.copy(main_py, backup_file)
                print(f"‚úì Backup criado: {backup_file}")
            
            # Ler o conte√∫do original
            with open(main_py, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Modificar o arquivo para evitar a importa√ß√£o do Strawberry
            modified_content = """# API DataBridge - Vers√£o simplificada
# Compat√≠vel com Python 3.13 (sem GraphQL)

import os
import logging
import time
from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.routing import APIRouter

# Comentado para evitar erro de compatibilidade com Python 3.13
# import strawberry
# from strawberry.fastapi import GraphQLRouter
# from app.api.graphql.schema import schema as graphql_schema

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("databridge")

# Rotas REST
from app.api.rest.router import api_router

# Vers√£o da API
VERSION = "1.0.0-memory"

# Configurar a aplica√ß√£o FastAPI
app = FastAPI(
    title="DataBridge API",
    description="API para integra√ß√£o de sistemas de informa√ß√£o financeira",
    version=VERSION,
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware para logging de requisi√ß√µes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    logger.info(f"{request.method} {request.url.path} - {response.status_code} - {process_time:.4f}s")
    return response

# Rotas da API REST
app.include_router(api_router, prefix="/api/v1")

# GraphQL endpoint desativado para compatibilidade com Python 3.13
# graphql_app = GraphQLRouter(graphql_schema)
# app.include_router(graphql_app, prefix="/api/v1/graphql")

# Healthcheck endpoint
@app.get("/api/v1/health")
async def health_check():
    return {
        "status": "online",
        "version": VERSION,
        "mode": "memory",
        "database": os.environ.get("DATABRIDGE_DB_MODE", "memory"),
        "message": "API running in compatibility mode (Python 3.13)"
    }

# Root endpoint com redirecionamento para a documenta√ß√£o
@app.get("/")
async def root():
    return {"message": "DataBridge API", "docs": "/api/v1/docs"}
"""
            
            # Salvar as mudan√ßas
            with open(main_py, 'w', encoding='utf-8') as f:
                f.write(modified_content)
            
            print("‚úÖ Arquivo main.py modificado para funcionar com Python 3.13")
        else:
            print(f"‚ùå Arquivo main.py n√£o encontrado em: {main_py}")
    else:
        print(f"‚úì Vers√£o do Python ({python_version}) n√£o precisa de ajustes")

def configurar_modo_memoria():
    """Configura a API para usar armazenamento em mem√≥ria"""
    print("\nüîß Configurando API para modo de mem√≥ria...")
    
    # Definir vari√°veis de ambiente
    os.environ["DATABRIDGE_DB_MODE"] = "memory"
    os.environ["DATABRIDGE_TESTING"] = "true"
    
    # Verificar e criar diret√≥rios necess√°rios
    uploads_dir = DATABRIDGE_DIR / "uploads"
    logs_dir = DATABRIDGE_DIR / "logs"
    
    uploads_dir.mkdir(parents=True, exist_ok=True)
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    print("‚úì Diret√≥rios de uploads e logs verificados")
    print("‚úì Vari√°veis de ambiente configuradas para modo de mem√≥ria")
    
    return True

def iniciar_api_simplificada():
    """Inicia a API com configura√ß√µes simplificadas"""
    print("\nüöÄ Iniciando API DataBridge em modo simplificado...")
    
    # Mudar para o diret√≥rio da API
    os.chdir(DATABRIDGE_DIR)
    
    # Configurar PYTHONPATH
    os.environ["PYTHONPATH"] = str(DATABRIDGE_DIR)
    
    # Informa√ß√µes de acesso
    print("\nüìä Informa√ß√µes de acesso:")
    print("- API: http://127.0.0.1:8000")
    print("- Documenta√ß√£o: http://127.0.0.1:8000/api/v1/docs")
    print("- Health Check: http://127.0.0.1:8000/api/v1/health")
    print("- Frontend: Abra no navegador: file://" + str(DATABRIDGE_DIR / "frontend" / "index.html"))
    
    print("\n‚è≥ Iniciando servidor API em modo simplificado...")
    print("-" * 60)
    
    # Iniciar uvicorn com configura√ß√µes simplificadas
    try:
        # Abrir navegador com a documenta√ß√£o (em outra thread)
        import threading
        import webbrowser
        
        def open_browser():
            time.sleep(3)  # Dar tempo para a API iniciar
            webbrowser.open("http://127.0.0.1:8000/api/v1/docs")
        
        threading.Thread(target=open_browser, daemon=True).start()
        
        # Iniciar o servidor
        subprocess.run([
            sys.executable, "-m", "uvicorn", 
            "app.main:app", 
            "--host", "0.0.0.0", 
            "--port", "8000", 
            "--reload"
        ], check=True)
    except KeyboardInterrupt:
        print("\nüõë API encerrada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar a API: {e}")
        
        # M√©todo alternativo
        print("\n‚û§ Tentando m√©todo alternativo...")
        os.system(f'"{sys.executable}" -m uvicorn app.main:app --host 0.0.0.0 --port 8000')

def main():
    """Fun√ß√£o principal que executa todo o fluxo de corre√ß√£o e inicializa√ß√£o"""
    print("\n" + "="*70)
    print(" "*15 + "DATABRIDGE - SOLU√á√ÉO DE PROBLEMAS" + " "*15)
    print("="*70)
    
    # 1. Verificar se √© administrador
    if not is_admin():
        print("\n‚ö†Ô∏è AVISO: Este script deve ser executado como administrador")
        print("   Algumas corre√ß√µes podem n√£o funcionar corretamente.")
        
        # Perguntar se deseja continuar
        resposta = input("\nDeseja continuar mesmo assim? (S/N): ")
        if resposta.lower() != 's':
            print("Encerrando script. Execute novamente como administrador.")
            return
    
    # 2. Corrigir problema do Strawberry GraphQL
    corrigir_problema_strawberry()
    
    # 3. Verificar e corrigir PostgreSQL
    postgres_ok = verificar_postgresql()
    
    # 4. Configurar modo adequado (PostgreSQL ou Mem√≥ria)
    if not postgres_ok:
        configurar_modo_memoria()
    
    # 5. Iniciar a API
    iniciar_api_simplificada()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Processo interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o: {e}")