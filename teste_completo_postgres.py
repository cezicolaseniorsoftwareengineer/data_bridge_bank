"""
Teste completo de conex√£o com PostgreSQL
Verifica se o servi√ßo est√° rodando, testa a conex√£o e executa consultas b√°sicas
"""
import os
import sys
import subprocess
import time
import socket
import psycopg2
from datetime import datetime
from pathlib import Path

def verificar_servico_postgres():
    """Verifica se o servi√ßo do PostgreSQL est√° rodando no Windows"""
    print("\n=== VERIFICANDO SERVI√áO DO POSTGRESQL ===")
    
    # Nome do servi√ßo PostgreSQL na sua m√°quina
    service_name = "postgresql-x64-17"
    
    try:
        stdout = subprocess.check_output(f"sc query {service_name}", shell=True, text=True)
        if "RUNNING" in stdout:
            print(f"‚úÖ Servi√ßo PostgreSQL ({service_name}) est√° ATIVO")
            return True
        else:
            print(f"‚ùå Servi√ßo PostgreSQL ({service_name}) N√ÉO est√° ativo")
            print(f"Status atual: {stdout.strip() if stdout else 'Desconhecido'}")
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao verificar servi√ßo PostgreSQL: {e}")
        
        # Tentar encontrar o servi√ßo correto do PostgreSQL
        try:
            stdout = subprocess.check_output("sc query state= all | findstr /i postgres", shell=True, text=True)
            if stdout:
                print(f"üìå Servi√ßos PostgreSQL encontrados:")
                print(stdout)
            else:
                print("‚ùå Nenhum servi√ßo PostgreSQL encontrado no sistema")
        except subprocess.CalledProcessError:
            print("‚ùå Falha ao procurar servi√ßos PostgreSQL")
        
        return False

def verificar_porta_postgres():
    """Verifica se a porta 5432 (PostgreSQL) est√° aberta"""
    print("\n=== VERIFICANDO PORTA DO POSTGRESQL ===")
    
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            resultado = s.connect_ex(('localhost', 5432))
            if resultado == 0:
                print("‚úÖ Porta 5432 est√° ABERTA - PostgreSQL est√° acess√≠vel")
                return True
            else:
                print("‚ùå Porta 5432 est√° FECHADA - PostgreSQL n√£o est√° acess√≠vel")
                return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar porta: {e}")
        return False

def testar_conexao_postgres():
    """Testa a conex√£o com o PostgreSQL"""
    print("\n=== TESTANDO CONEX√ÉO COM POSTGRESQL ===")
    
    try:
        # Tentar conex√£o com configura√ß√µes padr√£o
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",  # Banco de dados padr√£o
            user="postgres",
            password="postgres"
        )
        
        # Verificar vers√£o do PostgreSQL
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        versao = cursor.fetchone()[0]
        print(f"‚úÖ Conex√£o com PostgreSQL estabelecida com sucesso!")
        print(f"üìå Vers√£o do PostgreSQL: {versao}")
        
        # Verificar bancos de dados dispon√≠veis
        cursor.execute("SELECT datname FROM pg_database WHERE datistemplate = false;")
        bancos = cursor.fetchall()
        print(f"\nüìå Bancos de dados dispon√≠veis:")
        for banco in bancos:
            print(f"   - {banco[0]}")
        
        # Verificar se o banco 'databridge' existe
        databridge_existe = 'databridge' in [banco[0] for banco in bancos]
        if databridge_existe:
            print("‚úÖ Banco de dados 'databridge' encontrado")
        else:
            print("‚ùì Banco de dados 'databridge' n√£o encontrado")
        
        cursor.close()
        conn.close()
        return True, databridge_existe
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao PostgreSQL: {e}")
        return False, False

def testar_banco_databridge():
    """Testa o banco de dados databridge especificamente"""
    print("\n=== TESTANDO BANCO DE DADOS DATABRIDGE ===")
    
    try:
        # Conectar ao banco databridge
        conn = psycopg2.connect(
            host="localhost",
            database="databridge",
            user="postgres",
            password="postgres"
        )
        
        # Criar uma tabela de teste se n√£o existir
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS teste_conexao (
            id SERIAL PRIMARY KEY,
            mensagem TEXT,
            data_teste TIMESTAMP
        )
        """)
        conn.commit()
        
        # Inserir um registro de teste
        cursor.execute(
            "INSERT INTO teste_conexao (mensagem, data_teste) VALUES (%s, %s) RETURNING id",
            (f"Teste realizado por {os.getlogin()}", datetime.now())
        )
        id_inserido = cursor.fetchone()[0]
        conn.commit()
        
        print(f"‚úÖ Teste de escrita no banco 'databridge' realizado com sucesso (ID: {id_inserido})")
        
        # Ler o registro inserido
        cursor.execute("SELECT * FROM teste_conexao WHERE id = %s", (id_inserido,))
        registro = cursor.fetchone()
        print(f"‚úÖ Teste de leitura no banco 'databridge' realizado com sucesso")
        print(f"üìå Registro lido: {registro}")
        
        # Verificar tabelas existentes
        cursor.execute("""
        SELECT table_name FROM information_schema.tables
        WHERE table_schema = 'public'
        """)
        tabelas = cursor.fetchall()
        
        print(f"\nüìå Tabelas existentes no banco 'databridge':")
        if tabelas:
            for tabela in tabelas:
                cursor.execute(f"SELECT COUNT(*) FROM {tabela[0]}")
                contagem = cursor.fetchone()[0]
                print(f"   - {tabela[0]} ({contagem} registros)")
        else:
            print("   Nenhuma tabela encontrada al√©m da tabela de teste")
        
        cursor.close()
        conn.close()
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao testar banco 'databridge': {e}")
        return False

def criar_banco_databridge():
    """Cria o banco de dados databridge se n√£o existir"""
    print("\n=== CRIANDO BANCO DE DADOS DATABRIDGE ===")
    
    try:
        # Conectar ao postgres (banco padr√£o)
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",
            user="postgres",
            password="postgres"
        )
        conn.autocommit = True  # Necess√°rio para comandos como CREATE DATABASE
        
        # Verificar se o banco databridge j√° existe
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'databridge'")
        existe = cursor.fetchone()
        
        if not existe:
            print("üìå Criando banco de dados 'databridge'...")
            cursor.execute("CREATE DATABASE databridge")
            print("‚úÖ Banco de dados 'databridge' criado com sucesso!")
        else:
            print("üìå Banco de dados 'databridge' j√° existe")
        
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar banco 'databridge': {e}")
        return False

def iniciar_servico_postgres():
    """Tenta iniciar o servi√ßo do PostgreSQL se estiver parado"""
    print("\n=== INICIANDO SERVI√áO DO POSTGRESQL ===")
    
    try:
        # Nome espec√≠fico do servi√ßo PostgreSQL na sua m√°quina
        service_name = "postgresql-x64-17"
        
        # Confirmar nome do servi√ßo examinando os resultados da pesquisa anterior
        stdout = subprocess.check_output("sc query state= all | findstr /i postgres", shell=True, text=True)
        if stdout:
            for line in stdout.split("\n"):
                if "SERVICE_NAME" in line and "postgres" in line.lower():
                    found_name = line.split(":")[1].strip()
                    if found_name:
                        service_name = found_name
                        break
        
        print(f"üìå Tentando iniciar o servi√ßo '{service_name}'...")
        
        # Tentar iniciar o servi√ßo
        subprocess.check_call(f"sc start {service_name}", shell=True)
        
        # Aguardar um pouco
        print("üìå Aguardando o servi√ßo iniciar (5 segundos)...")
        time.sleep(5)
        
        # Verificar se o servi√ßo est√° rodando
        stdout = subprocess.check_output(f"sc query {service_name}", shell=True, text=True)
        if "RUNNING" in stdout:
            print(f"‚úÖ Servi√ßo '{service_name}' iniciado com sucesso!")
            return True
        else:
            print(f"‚ùå N√£o foi poss√≠vel iniciar o servi√ßo '{service_name}'")
            print(f"Status atual: {stdout}")
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao iniciar o servi√ßo PostgreSQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def gerar_relatorio_final(resultados):
    """Gera um relat√≥rio resumido dos testes realizados"""
    print("\n" + "="*60)
    print(" "*20 + "RELAT√ìRIO FINAL" + " "*20)
    print("="*60)
    
    # Contar resultados positivos
    testes_ok = sum(1 for resultado in resultados.values() if resultado is True)
    total_testes = len(resultados)
    
    # Resumo geral
    print(f"\nüìä Resumo: {testes_ok}/{total_testes} testes bem-sucedidos")
    
    # Status individual de cada teste
    for teste, resultado in resultados.items():
        status = "‚úÖ" if resultado else "‚ùå"
        print(f"{status} {teste}")
    
    # Diagn√≥stico
    if resultados["servico_postgres"] is False:
        print("\n‚ö†Ô∏è DIAGN√ìSTICO: O servi√ßo PostgreSQL n√£o est√° rodando")
        print("   Solu√ß√£o: Inicie o servi√ßo manualmente atrav√©s do painel de 'Servi√ßos' do Windows")
        print("   ou execute o script 'iniciar_sistema_completo.py' como administrador")
    elif resultados["porta_postgres"] is False:
        print("\n‚ö†Ô∏è DIAGN√ìSTICO: O servi√ßo PostgreSQL est√° rodando mas a porta 5432 n√£o est√° acess√≠vel")
        print("   Solu√ß√£o: Verifique se outro programa est√° usando a porta 5432")
        print("   ou verifique configura√ß√µes de firewall")
    elif resultados["conexao_postgres"] is False:
        print("\n‚ö†Ô∏è DIAGN√ìSTICO: A porta est√° aberta mas n√£o foi poss√≠vel conectar ao PostgreSQL")
        print("   Solu√ß√£o: Verifique as credenciais (usu√°rio/senha) ou se o PostgreSQL")
        print("   est√° configurado para aceitar conex√µes TCP/IP (arquivo pg_hba.conf)")
    elif resultados["banco_databridge"] is False:
        print("\n‚ö†Ô∏è DIAGN√ìSTICO: Conex√£o com PostgreSQL OK, mas o banco databridge tem problemas")
        print("   Solu√ß√£o: Verifique se o banco 'databridge' existe ou tente cri√°-lo novamente")
    else:
        print("\n‚úÖ DIAGN√ìSTICO: O banco de dados PostgreSQL est√° funcionando perfeitamente!")
        print("   Todos os testes foram conclu√≠dos com sucesso.")
    
    # Data e hora do teste
    print(f"\nTeste realizado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("="*60)

def main():
    """Fun√ß√£o principal que executa todos os testes"""
    print("\n" + "="*60)
    print(" "*15 + "TESTE DE BANCO DE DADOS POSTGRESQL" + " "*15)
    print("="*60)
    
    # Armazenar resultados dos testes
    resultados = {}
    
    # 1. Verificar se o servi√ßo est√° rodando
    resultados["servico_postgres"] = verificar_servico_postgres()
    
    # 2. Se o servi√ßo n√£o estiver rodando, tentar inici√°-lo
    if not resultados["servico_postgres"]:
        resultados["servico_postgres"] = iniciar_servico_postgres()
    
    # 3. Verificar se a porta est√° aberta (apenas se o servi√ßo estiver rodando)
    if resultados["servico_postgres"]:
        resultados["porta_postgres"] = verificar_porta_postgres()
    else:
        resultados["porta_postgres"] = False
    
    # 4. Testar conex√£o com PostgreSQL (apenas se a porta estiver aberta)
    if resultados["porta_postgres"]:
        conexao_ok, databridge_existe = testar_conexao_postgres()
        resultados["conexao_postgres"] = conexao_ok
    else:
        resultados["conexao_postgres"] = False
        databridge_existe = False
    
    # 5. Criar o banco databridge se n√£o existir (apenas se a conex√£o estiver OK)
    if resultados["conexao_postgres"] and not databridge_existe:
        criar_banco_databridge()
    
    # 6. Testar banco databridge espec√≠fico (apenas se a conex√£o com PostgreSQL estiver OK)
    if resultados["conexao_postgres"]:
        resultados["banco_databridge"] = testar_banco_databridge()
    else:
        resultados["banco_databridge"] = False
    
    # 7. Gerar relat√≥rio final
    gerar_relatorio_final(resultados)
    
    # Retornar c√≥digo de sa√≠da com base no sucesso dos testes
    return 0 if all(resultados.values()) else 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\nüõë Teste interrompido pelo usu√°rio")
        sys.exit(2)
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o dos testes: {e}")
        sys.exit(3)